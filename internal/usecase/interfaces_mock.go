// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreateUserUseCaseInterface is a mock of CreateUserUseCaseInterface interface.
type MockCreateUserUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserUseCaseInterfaceMockRecorder
}

// MockCreateUserUseCaseInterfaceMockRecorder is the mock recorder for MockCreateUserUseCaseInterface.
type MockCreateUserUseCaseInterfaceMockRecorder struct {
	mock *MockCreateUserUseCaseInterface
}

// NewMockCreateUserUseCaseInterface creates a new mock instance.
func NewMockCreateUserUseCaseInterface(ctrl *gomock.Controller) *MockCreateUserUseCaseInterface {
	mock := &MockCreateUserUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockCreateUserUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateUserUseCaseInterface) EXPECT() *MockCreateUserUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateUserUseCaseInterface) Execute(ctx context.Context, input CreateUserUseCaseInputDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateUserUseCaseInterfaceMockRecorder) Execute(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateUserUseCaseInterface)(nil).Execute), ctx, input)
}

// MockAuthUserUseCaseInterface is a mock of AuthUserUseCaseInterface interface.
type MockAuthUserUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUserUseCaseInterfaceMockRecorder
}

// MockAuthUserUseCaseInterfaceMockRecorder is the mock recorder for MockAuthUserUseCaseInterface.
type MockAuthUserUseCaseInterfaceMockRecorder struct {
	mock *MockAuthUserUseCaseInterface
}

// NewMockAuthUserUseCaseInterface creates a new mock instance.
func NewMockAuthUserUseCaseInterface(ctrl *gomock.Controller) *MockAuthUserUseCaseInterface {
	mock := &MockAuthUserUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockAuthUserUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUserUseCaseInterface) EXPECT() *MockAuthUserUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockAuthUserUseCaseInterface) Execute(ctx context.Context, input AuthUserUseCaseInputDTO) (*AuthUserUseCaseOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(*AuthUserUseCaseOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockAuthUserUseCaseInterfaceMockRecorder) Execute(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAuthUserUseCaseInterface)(nil).Execute), ctx, input)
}

// MockUpdateUserUseCaseInterface is a mock of UpdateUserUseCaseInterface interface.
type MockUpdateUserUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateUserUseCaseInterfaceMockRecorder
}

// MockUpdateUserUseCaseInterfaceMockRecorder is the mock recorder for MockUpdateUserUseCaseInterface.
type MockUpdateUserUseCaseInterfaceMockRecorder struct {
	mock *MockUpdateUserUseCaseInterface
}

// NewMockUpdateUserUseCaseInterface creates a new mock instance.
func NewMockUpdateUserUseCaseInterface(ctrl *gomock.Controller) *MockUpdateUserUseCaseInterface {
	mock := &MockUpdateUserUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockUpdateUserUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateUserUseCaseInterface) EXPECT() *MockUpdateUserUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateUserUseCaseInterface) Execute(ctx context.Context, input UpdateUserUseCaseInputDTO) (*UpdateUserUseCaseOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(*UpdateUserUseCaseOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateUserUseCaseInterfaceMockRecorder) Execute(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateUserUseCaseInterface)(nil).Execute), ctx, input)
}

// MockDeleteUserUseCaseInterface is a mock of DeleteUserUseCaseInterface interface.
type MockDeleteUserUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteUserUseCaseInterfaceMockRecorder
}

// MockDeleteUserUseCaseInterfaceMockRecorder is the mock recorder for MockDeleteUserUseCaseInterface.
type MockDeleteUserUseCaseInterfaceMockRecorder struct {
	mock *MockDeleteUserUseCaseInterface
}

// NewMockDeleteUserUseCaseInterface creates a new mock instance.
func NewMockDeleteUserUseCaseInterface(ctrl *gomock.Controller) *MockDeleteUserUseCaseInterface {
	mock := &MockDeleteUserUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockDeleteUserUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteUserUseCaseInterface) EXPECT() *MockDeleteUserUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDeleteUserUseCaseInterface) Execute(ctx context.Context, input DeleteUserUseCaseInputDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDeleteUserUseCaseInterfaceMockRecorder) Execute(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDeleteUserUseCaseInterface)(nil).Execute), ctx, input)
}
